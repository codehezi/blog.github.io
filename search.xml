<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>picGo图床工具</title>
      <link href="/2023/08/10/picgo-gitee/"/>
      <url>/2023/08/10/picgo-gitee/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="picGo图床工具"><a href="#picGo图床工具" class="headerlink" title="picGo图床工具"></a>picGo图床工具</h3><ul><li><p>1.下载picGo工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Molunerfinn/PicGo/releases/tag/v2.4.0-beta.3</span><br></pre></td></tr></table></figure></li><li><p>2.安装picGo工具加简单设置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/48920da3888893341a2a0c46478244f3.png"></p><blockquote><blockquote><p>打开图中的开关</p></blockquote></blockquote></li><li><p>3.下载上传插件与gitee绑定</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fda0581300059ff5374cc7744eda8705.png"></p></li><li><p>4.创建gitee的仓库，存储上传的图片</p></li><li><p>5.配置pic与gitee仓库的绑定</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3a9d024557b74d69a1894f71a02ed29b.png"></p><p> 如何生成令牌？</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/7e92e84eaba54d9610b173135028b170.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e10591bc14fdded0f181325014b06dca.png">   </p><p><img src="https://img-blog.csdnimg.cn/img_convert/3139ff6ddbb56590e767c0420e8170fd.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1d0821e5dbe8f6f13b5a220a179407bb.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/faac6998406ff75687bbd07d82f5eea7.png"></p><p>复制此处生成的令牌放入token即可</p><blockquote><p>注意：仓库要设置成公共的，不然上传的文件无法在相册或者markdown中显示出来</p></blockquote><ul><li><p>6.最后的效果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/205e2d1edca80f2c51da0aa0a86d48af.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> picGo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis实现源码简约解析</title>
      <link href="/2023/01/15/mybatis/"/>
      <url>/2023/01/15/mybatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、定义需要使用的mapper接口"><a href="#一、定义需要使用的mapper接口" class="headerlink" title="一、定义需要使用的mapper接口"></a>一、定义需要使用的<strong>mapper</strong>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.code.mybatis.Param;</span><br><span class="line"><span class="keyword">import</span> com.code.mybatis.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select *from person where name=#&#123;name&#125; and age=#&#123;age&#125;&quot;)</span></span><br><span class="line">    List&lt;person&gt; <span class="title function_">getPersons</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> <span class="type">int</span> age)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select *from person where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    person <span class="title function_">getOne</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、构建-mapper接口-的代理工厂"><a href="#二、构建-mapper接口-的代理工厂" class="headerlink" title="二、构建 mapper接口 的代理工厂"></a>二、构建 <strong>mapper</strong>接口 的代理工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperProxyFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个T表示&lt;T&gt;是一个泛型（相当于告诉编辑器这个T泛型）</span></span><br><span class="line"><span class="comment">     * 第二个T表示方法的返回数据是一个T类型的数据</span></span><br><span class="line"><span class="comment">     * 第三个T表示传入的参数是一个T类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clazz&#125;, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> (T) object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>定义返回数据以及传入数据都使用泛型，因为不清楚要传入或者要返回的数据是什么类型的数据，使用泛型可以解决数据类型的问题。</p></blockquote><h4 id="定义mybatis需要使用的注解"><a href="#定义mybatis需要使用的注解" class="headerlink" title="定义mybatis需要使用的注解"></a>定义mybatis需要使用的注解</h4><ul><li><p>@Select</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Select &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>用于定义的接口方法上，写sql语句使用</p></blockquote></li><li><p>@Param</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Param &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>用于定义接口方法的参数上，用来解析对应的参数并进行复制操作</p></blockquote><h3 id="三、使用jdbc-连接数据库并操作数据库"><a href="#三、使用jdbc-连接数据库并操作数据库" class="headerlink" title="三、使用jdbc 连接数据库并操作数据库"></a>三、使用<strong>jdbc</strong> 连接数据库并操作数据库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个T表示&lt;T&gt;是一个泛型（相当于告诉编辑器这个T泛型）</span></span><br><span class="line"><span class="comment">     * 第二个T表示方法的返回数据是一个T类型的数据</span></span><br><span class="line"><span class="comment">     * 第三个T表示传入的参数是一个T类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clazz&#125;, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">                <span class="comment">//这是8.0版本以后url的写法</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/codehezi1?&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;useSSL=false&amp;serverTimezone=GMT&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//url=&quot;jdbc:mysql://localhost:3306/datebaseName   这是8.0版本以前url的写法</span></span><br><span class="line">                <span class="comment">//连接数据库</span></span><br><span class="line">                <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">                System.out.println(con);</span><br><span class="line">                con.close();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> (T) object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>直接这样使用jdbc去连接操作数据库，很显然不够灵活，无法像mybatis一样定义一个接口，然后写上方法，通过传入的参数和select的查询得到想要的数据。所以后面就需要解析SQL拿到参数拼装参数，然后执行SQL，得到想要的返回结果，那要如何操作？</p></blockquote><h3 id="四、改造三中的代码如下所示（简单版）"><a href="#四、改造三中的代码如下所示（简单版）" class="headerlink" title="四、改造三中的代码如下所示（简单版）"></a>四、改造三中的代码如下所示（简单版）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.code.test.person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class, TypeHandler&gt; paramTypeHandler = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//使用map注册不同参数类型对应的处理器</span></span><br><span class="line">        paramTypeHandler.put(String.class, <span class="keyword">new</span> <span class="title class_">ParamStringTypeHandler</span>());</span><br><span class="line">        paramTypeHandler.put(Integer.class, <span class="keyword">new</span> <span class="title class_">ParamIntegerTypeHandler</span>());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个T表示&lt;T&gt;是一个泛型（相当于告诉编辑器这个T泛型）</span></span><br><span class="line"><span class="comment">     * 第二个T表示方法的返回数据是一个T类型的数据</span></span><br><span class="line"><span class="comment">     * 第三个T表示传入的参数是一个T类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clazz&#125;, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">//person对象的集合</span></span><br><span class="line">                List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">                <span class="comment">//这是8.0版本以后url的写法</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/codehezi1?&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;useSSL=false&amp;serverTimezone=GMT&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//url=&quot;jdbc:mysql://localhost:3306/datebaseName   这是8.0版本以前url的写法</span></span><br><span class="line">                <span class="comment">//连接数据库</span></span><br><span class="line">                <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//解析到方法上的参数sql</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">valueSql</span> <span class="operator">=</span> method.getAnnotation(Select.class).value();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//处理得到的sql</span></span><br><span class="line">                <span class="type">ParameterMappingTokenHandler</span> <span class="variable">tokenHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParameterMappingTokenHandler</span>();</span><br><span class="line">                <span class="type">GenericTokenParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericTokenParser</span>(<span class="string">&quot;#&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, tokenHandler);</span><br><span class="line">                <span class="type">String</span> <span class="variable">parseSql</span> <span class="operator">=</span> parser.parse(valueSql);</span><br><span class="line">                <span class="comment">//?所对应的参数的位置</span></span><br><span class="line">                List&lt;ParameterMapping&gt; parameterMappings = tokenHandler.getParameterMappings();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                System.out.println(parseSql);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取参数与值的映射关系</span></span><br><span class="line">                Map&lt;String, Object&gt; paramValueMapping = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                Parameter[] parameters = method.getParameters();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> parameters[i].getName();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">value1</span> <span class="operator">=</span> parameters[i].getAnnotation(Param.class).value();</span><br><span class="line">                    <span class="comment">//这个是jdk获取参数的值，但是这个name是arg0,arg1,所以这个时候需要使用到Param这个注解,找到参数的名字和值的关系,jdk8之前的版本这个Param注解需要写，8以及之后可以不写</span></span><br><span class="line">                    paramValueMapping.put(name, args[i]);</span><br><span class="line">                    <span class="comment">//这个就是传的参数与值的对应关系，然而jdk的那个仍然可以保留，因为（select *from person where name=#&#123;arg0&#125;）这种写法仍然可以支持</span></span><br><span class="line">                    paramValueMapping.put(value1, args[i]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//构建查询sql</span></span><br><span class="line">                <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> con.prepareStatement(parseSql);</span><br><span class="line">                <span class="comment">//遍历参数进行设置值</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameterMappings.size(); i++) &#123;</span><br><span class="line">                    <span class="comment">//对应参数名称的值</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> parameterMappings.get(i).getParamValue();</span><br><span class="line">                    <span class="comment">//参数名称对应的参数值</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> paramValueMapping.get(paramValue);</span><br><span class="line">                    <span class="comment">//对应参数类型</span></span><br><span class="line">                    Class&lt;?&gt; aClass = o.getClass();</span><br><span class="line">                    <span class="comment">//存不同类型参数</span></span><br><span class="line">                    paramTypeHandler.get(aClass).setParameter(statement, i + <span class="number">1</span>, paramValueMapping.get(paramValue));</span><br><span class="line"><span class="comment">//                    statement.setObject(i + 1, paramValueMapping.get(paramValue));</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//设置参数值</span></span><br><span class="line">                <span class="comment">//statement.setString(1, &quot;zhangsan&quot;);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//执行sql</span></span><br><span class="line">                statement.execute();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//拿到返回结果</span></span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.getResultSet();</span><br><span class="line">                <span class="comment">//解析方法的返回参数，是否带泛型还是不带泛型</span></span><br><span class="line">                <span class="type">Class</span> <span class="variable">resultType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Type</span> <span class="variable">genericReturnType</span> <span class="operator">=</span> method.getGenericReturnType();</span><br><span class="line">                <span class="comment">//判断最后使用的类型是什么（这里简单的处理）</span></span><br><span class="line">                <span class="keyword">if</span> (genericReturnType <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                    <span class="comment">//不带泛型的直接使用这个类型强转</span></span><br><span class="line">                    resultType = (Class) genericReturnType;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (genericReturnType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">                    <span class="comment">//带泛型的取到泛型类型强转</span></span><br><span class="line">                    Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">                    resultType = (Class) actualTypeArguments[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//借用jdbc来得到返回的数据有哪些</span></span><br><span class="line">                <span class="type">ResultSetMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> resultSet.getMetaData();</span><br><span class="line">                List&lt;String&gt; metaList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; metaData.getColumnCount(); i++) &#123;</span><br><span class="line">                    metaList.add(metaData.getColumnName(i + <span class="number">1</span>));<span class="comment">//注意</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//记录对象的set方法与返回数据的对应关系</span></span><br><span class="line">                Map&lt;String, Method&gt; setterMapping = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (Method declaredMethod : resultType.getDeclaredMethods()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (declaredMethod.getName().startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> declaredMethod.getName().substring(<span class="number">3</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">columName</span> <span class="operator">=</span> name.substring(<span class="number">0</span>, <span class="number">1</span>).toLowerCase(Locale.ROOT) + name.substring(<span class="number">1</span>).toLowerCase(Locale.ROOT);</span><br><span class="line">                        setterMapping.put(columName, declaredMethod);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                    <span class="comment">//实例化对象</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> resultType.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//                    setterMapping.get(&quot;id&quot;).getParameters()[0].getClass()</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; metaList.size(); i++) &#123;</span><br><span class="line">                        Class&lt;?&gt; type = setterMapping.get(metaList.get(i)).getParameters()[<span class="number">0</span>].getType();</span><br><span class="line">                        <span class="type">TypeHandler</span> <span class="variable">typeHandler</span> <span class="operator">=</span> paramTypeHandler.get(type);</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">parameter</span> <span class="operator">=</span> typeHandler.getParameter(resultSet, metaList.get(i));</span><br><span class="line">                        setterMapping.get(metaList.get(i)).invoke(o, parameter);</span><br><span class="line">                    &#125;</span><br><span class="line">                   <span class="comment">/* person p = new person();</span></span><br><span class="line"><span class="comment">                    p.setId(resultSet.getInt(&quot;id&quot;));</span></span><br><span class="line"><span class="comment">                    p.setAge(resultSet.getInt(&quot;age&quot;));</span></span><br><span class="line"><span class="comment">                    p.setName(resultSet.getString(&quot;name&quot;));*/</span></span><br><span class="line">                    list.add(o);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(con);</span><br><span class="line">                con.close();</span><br><span class="line">                <span class="keyword">if</span> (method.getReturnType().equals(List.class)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> list;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        ob = list.get(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> ob;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> (T) object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解析sql，这个使用mybatis中解析的方法"><a href="#解析sql，这个使用mybatis中解析的方法" class="headerlink" title="解析sql，这个使用mybatis中解析的方法"></a>解析sql，这个使用mybatis中解析的方法</h4><ul><li><p>参数映射的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterMapping</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String paramValue;<span class="comment">//这个参数就是解析后‘#&#123;&#125;’这个字符中的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParameterMapping</span><span class="params">(String paramValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.paramValue = paramValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getParamValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paramValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParamValue</span><span class="params">(String paramValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.paramValue = paramValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>TokenHandler接口，解析处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TokenHandler</span> &#123;</span><br><span class="line">    String <span class="title function_">handleToken</span><span class="params">(String content)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实现解析处理器的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterMappingTokenHandler</span> <span class="keyword">implements</span> <span class="title class_">TokenHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ParameterMapping&gt; parameterMappings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleToken</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        parameterMappings.add(<span class="keyword">new</span> <span class="title class_">ParameterMapping</span>(content));<span class="comment">//对应？位置的参数，记录参数名称以及顺序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;ParameterMapping&gt; <span class="title function_">getParameterMappings</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parameterMappings;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>解析类GenericTokenParser</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.code.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTokenParser</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String openToken;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String closeToken;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GenericTokenParser</span><span class="params">(String openToken, String closeToken, TokenHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.openToken = openToken;</span><br><span class="line">        <span class="built_in">this</span>.closeToken = closeToken;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parse</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="literal">null</span> || text.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// search open token</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> text.indexOf(openToken);</span><br><span class="line">        <span class="keyword">if</span> (start == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> text;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] src = text.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (start &gt; <span class="number">0</span> &amp;&amp; src[start - <span class="number">1</span>] == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// this open token is escaped. remove the backslash and continue.</span></span><br><span class="line">                builder.append(src, offset, start - offset - <span class="number">1</span>).append(openToken);</span><br><span class="line">                offset = start + openToken.length();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// found open token. let&#x27;s search close token.</span></span><br><span class="line">                <span class="keyword">if</span> (expression == <span class="literal">null</span>) &#123;</span><br><span class="line">                    expression = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    expression.setLength(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                builder.append(src, offset, start - offset);</span><br><span class="line">                offset = start + openToken.length();</span><br><span class="line">                <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> text.indexOf(closeToken, offset);</span><br><span class="line">                <span class="keyword">while</span> (end &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (end &gt; offset &amp;&amp; src[end - <span class="number">1</span>] == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">// this close token is escaped. remove the backslash and continue.</span></span><br><span class="line">                        expression.append(src, offset, end - offset - <span class="number">1</span>).append(closeToken);</span><br><span class="line">                        offset = end + closeToken.length();</span><br><span class="line">                        end = text.indexOf(closeToken, offset);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        expression.append(src, offset, end - offset);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (end == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// close token was not found.</span></span><br><span class="line">                    builder.append(src, start, src.length - start);</span><br><span class="line">                    offset = src.length;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    builder.append(handler.handleToken(expression.toString()));</span><br><span class="line">                    offset = end + closeToken.length();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            start = text.indexOf(openToken, offset);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt; src.length) &#123;</span><br><span class="line">            builder.append(src, offset, src.length - offset);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>真正去解析SQL的类。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rocketmq安装测试</title>
      <link href="/2022/10/04/rocketmq/"/>
      <url>/2022/10/04/rocketmq/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>rocketmq的安装和使用</p></blockquote><p><a href="https://rocketmq.apache.org/download">rocketmq压缩包下载地址</a></p><blockquote><p>以最新的rocketmq版本测试</p><p>注意：（1）操作系统建议64位，linux</p><pre><code>     （2）jdk需要1.8+</code></pre></blockquote><h4 id="1-安装RocketMQ"><a href="#1-安装RocketMQ" class="headerlink" title="1.安装RocketMQ"></a>1.安装<em>RocketMQ</em></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">##在需要的目录下建一个rocketmq的文件夹</span><br><span class="line">mkdir rocketmq</span><br><span class="line"></span><br><span class="line">cd rocketmq</span><br><span class="line"></span><br><span class="line">##加压下载的压缩包</span><br><span class="line">unzip rocketmq-all-5.0.0-source-release.zip</span><br><span class="line"></span><br><span class="line">##删除压缩包</span><br><span class="line">rm -f rocketmq-all-5.0.0-source-release.zip</span><br><span class="line"></span><br><span class="line">##进入加压后的文件夹下</span><br><span class="line">cd rocketmq-all-5.0.0-source-release</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-启动NameServer"><a href="#2-启动NameServer" class="headerlink" title="2.启动NameServer"></a>2.启动NameServer</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##nameserver是rocketmq的整个控制中心，必须先启动</span><br><span class="line">nohup sh mqnamesrv &amp;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.3iw21sla14u0.webp" alt="image"></p><blockquote><p>出现这个结果说明nameserver启动成功。</p></blockquote><h4 id="3-启动broker"><a href="#3-启动broker" class="headerlink" title="3.启动broker"></a>3.启动broker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh mqbroker &amp;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.68d7red50do0.webp" alt="image"></p><blockquote><p>这个结果说明这个broker也启动成功</p></blockquote><h4 id="5-SDK测试消息收发"><a href="#5-SDK测试消息收发" class="headerlink" title="5. SDK测试消息收发"></a>5. SDK测试消息收发</h4><ul><li><p>（1）、在IDEA中创建一个Java工程。</p></li><li><p>（2）、在 <em>pom.xml</em> 文件中添加以下依赖引入Java依赖库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;rocketmq-client-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>（3）、通过mqadmin创建 Topic。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/mqadmin updatetopic -n localhost:9876 -t TestTopic</span><br></pre></td></tr></table></figure></li><li><p>（4）、在已创建的Java工程中，创建发送普通消息程序并运行，示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.consumer.ConsumeResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.consumer.MessageListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.consumer.SimpleConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.message.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.message.MessageView;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.producer.Producer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.producer.SendReceipt;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClientException &#123;</span><br><span class="line">        <span class="comment">//接入点地址，需要设置成Proxy的地址和端口列表，一般是xxx:8081;xxx:8081。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;localhost:8081&quot;</span>;</span><br><span class="line">        <span class="comment">//消息发送的目标Topic名称，需要提前创建。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;TestTopic&quot;</span>;</span><br><span class="line">        <span class="type">ClientServiceProvider</span> <span class="variable">provider</span> <span class="operator">=</span> ClientServiceProvider.loadService();</span><br><span class="line">        <span class="type">ClientConfigurationBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> ClientConfiguration.newBuilder().setEndpoints(endpoint);</span><br><span class="line">        <span class="type">ClientConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> builder.build();</span><br><span class="line">        <span class="comment">//初始化Producer时需要设置通信配置以及预绑定的Topic。</span></span><br><span class="line">        <span class="type">Producer</span> <span class="variable">producer</span> <span class="operator">=</span> provider.newProducerBuilder()</span><br><span class="line">                .setTopics(topic)</span><br><span class="line">                .setClientConfiguration(configuration)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//普通消息发送。</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> provider.newMessageBuilder()</span><br><span class="line">                .setTopic(topic)</span><br><span class="line">                <span class="comment">//设置消息索引键，可根据关键字精确查找某条消息。</span></span><br><span class="line">                .setKeys(<span class="string">&quot;messageKey&quot;</span>)</span><br><span class="line">                <span class="comment">//设置消息Tag，用于消费端根据指定Tag过滤消息。</span></span><br><span class="line">                .setTag(<span class="string">&quot;messageTag&quot;</span>)</span><br><span class="line">                <span class="comment">//消息体。</span></span><br><span class="line">                .setBody(<span class="string">&quot;messageBody&quot;</span>.getBytes())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//发送消息，需要关注发送结果，并捕获失败等异常。</span></span><br><span class="line">            <span class="type">SendReceipt</span> <span class="variable">sendReceipt</span> <span class="operator">=</span> producer.send(message);</span><br><span class="line">            System.out.println(sendReceipt.getMessageId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>（5）、在已创建的Java工程中，创建订阅普通消息程序并运行。Apache RocketMQ 支持<a href="https://rocketmq.apache.org/zh/docs/%E5%8A%9F%E8%83%BD%E8%A1%8C%E4%B8%BA/06consumertype">SimpleConsumer</a>和<a href="https://rocketmq.apache.org/zh/docs/%E5%8A%9F%E8%83%BD%E8%A1%8C%E4%B8%BA/06consumertype">PushConsumer</a>两种消费者类型，您可以选择以下任意一种方式订阅消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.consumer.ConsumeResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.consumer.FilterExpression;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.consumer.FilterExpressionType;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.apis.consumer.PushConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PushConsumerExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(PushConsumerExample.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">PushConsumerExample</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClientException, IOException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ClientServiceProvider</span> <span class="variable">provider</span> <span class="operator">=</span> ClientServiceProvider.loadService();</span><br><span class="line">        <span class="comment">//接入点地址，需要设置成Proxy的地址和端口列表，一般是xxx:8081;xxx:8081。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoints</span> <span class="operator">=</span> <span class="string">&quot;localhost:8081&quot;</span>;</span><br><span class="line">        <span class="type">ClientConfiguration</span> <span class="variable">clientConfiguration</span> <span class="operator">=</span> ClientConfiguration.newBuilder()</span><br><span class="line">                .setEndpoints(endpoints)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//订阅消息的过滤规则，表示订阅所有Tag的消息。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tag</span> <span class="operator">=</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">        <span class="type">FilterExpression</span> <span class="variable">filterExpression</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterExpression</span>(tag, FilterExpressionType.TAG);</span><br><span class="line">        <span class="comment">//为消费者指定所属的消费者分组，Group需要提前创建。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">consumerGroup</span> <span class="operator">=</span> <span class="string">&quot;Your ConsumerGroup&quot;</span>;</span><br><span class="line">        <span class="comment">//指定需要订阅哪个目标Topic，Topic需要提前创建。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;TestTopic&quot;</span>;</span><br><span class="line">        <span class="comment">//初始化PushConsumer，需要绑定消费者分组ConsumerGroup、通信参数以及订阅关系。</span></span><br><span class="line">        <span class="type">PushConsumer</span> <span class="variable">pushConsumer</span> <span class="operator">=</span> provider.newPushConsumerBuilder()</span><br><span class="line">                .setClientConfiguration(clientConfiguration)</span><br><span class="line">                <span class="comment">//设置消费者分组。</span></span><br><span class="line">                .setConsumerGroup(consumerGroup)</span><br><span class="line">                <span class="comment">//设置预绑定的订阅关系。</span></span><br><span class="line">                .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))</span><br><span class="line">                <span class="comment">//设置消费监听器。</span></span><br><span class="line">                .setMessageListener(messageView -&gt; &#123;</span><br><span class="line">                    <span class="comment">//处理消息并返回消费结果。</span></span><br><span class="line">                    <span class="comment">// LOGGER.info(&quot;Consume message=&#123;&#125;&quot;, messageView);</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;Consume message!!&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> ConsumeResult.SUCCESS;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">        <span class="comment">//如果不需要再使用PushConsumer，可关闭该进程。</span></span><br><span class="line">        <span class="comment">//pushConsumer.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-关闭服务"><a href="#6-关闭服务" class="headerlink" title="6.关闭服务"></a>6.关闭服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">##在当前的bin目录下</span><br><span class="line">./mqshutdown broker //此时会发送关闭指令不会立马关闭</span><br><span class="line"></span><br><span class="line">./mqshutdown namesrv //也是发送关闭指令</span><br><span class="line"></span><br><span class="line">##查看是否关闭</span><br><span class="line">netstat -anp | grep 9876  //执行这个命令如果没有结果说明rocketemq服务已经关闭，可能他要刷多次。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> rocketmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rocketmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springbean的可扩展点总结</title>
      <link href="/2022/09/22/spring01/"/>
      <url>/2022/09/22/spring01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Spring 中最常用的 11 个扩展点。</p></blockquote><h2 id="1-自定义拦截器-spring"><a href="#1-自定义拦截器-spring" class="headerlink" title="1.自定义拦截器 spring"></a>1.自定义拦截器 spring</h2><blockquote><p>mvc 拦截器根 spring 拦截器相比，它里面能够获取 HttpServletRequest 和 HttpServletResponse 等 web 对象实例。spring mvc 拦截器的顶层接口是：HandlerInterceptor，包含三个方法：preHandle 目标方法执行前执行 postHandle 目标方法执行后执行 afterCompletion 请求完成时执行为了方便我们一般情况会用 HandlerInterceptor 接口的实现类 HandlerInterceptorAdapter 类。假如有权限认证、日志、统计的场景，可以使用该拦截器。</p></blockquote><ul><li><h3 id="第一步，继承-HandlerInterceptorAdapter-类定义拦截器："><a href="#第一步，继承-HandlerInterceptorAdapter-类定义拦截器：" class="headerlink" title="第一步，继承 HandlerInterceptorAdapter 类定义拦截器："></a>第一步，继承 HandlerInterceptorAdapter 类定义拦截器：</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestUrl</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="keyword">if</span> (checkAuth(requestUrl)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkAuth</span><span class="params">(String requestUrl)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===权限校验===&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="第二步，将该拦截器注册到-spring-容器："><a href="#第二步，将该拦截器注册到-spring-容器：" class="headerlink" title="第二步，将该拦截器注册到 spring 容器："></a>第二步，将该拦截器注册到 spring 容器：</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAuthConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthInterceptor <span class="title function_">getAuthInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">AuthInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="第三步，在请求接口时-spring-mvc-通过该拦截器，能够自动拦截该接口，并且校验权限。"><a href="#第三步，在请求接口时-spring-mvc-通过该拦截器，能够自动拦截该接口，并且校验权限。" class="headerlink" title="第三步，在请求接口时 spring mvc 通过该拦截器，能够自动拦截该接口，并且校验权限。"></a>第三步，在请求接口时 spring mvc 通过该拦截器，能够自动拦截该接口，并且校验权限。</h3><ul><li><h3 id="2-获取-Spring-容器对象在我们日常开发中，经常需要从-Spring-容器中获取-Bean，但你知道如何获取-Spring-容器对象吗？"><a href="#2-获取-Spring-容器对象在我们日常开发中，经常需要从-Spring-容器中获取-Bean，但你知道如何获取-Spring-容器对象吗？" class="headerlink" title="2.获取 Spring 容器对象在我们日常开发中，经常需要从 Spring 容器中获取 Bean，但你知道如何获取 Spring 容器对象吗？"></a>2.获取 Spring 容器对象在我们日常开发中，经常需要从 Spring 容器中获取 Bean，但你知道如何获取 Spring 容器对象吗？</h3></li><li><h4 id="2-1-BeanFactoryAware-接口"><a href="#2-1-BeanFactoryAware-接口" class="headerlink" title="2.1 BeanFactoryAware 接口"></a>2.1 BeanFactoryAware 接口</h4></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonService</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) beanFactory.getBean(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现 BeanFactoryAware 接口，然后重写 setBeanFactory 方法，就能从该方法中获取到 spring 容器对象。</p></blockquote><ul><li><h4 id="2-2-ApplicationContextAware-接口"><a href="#2-2-ApplicationContextAware-接口" class="headerlink" title="2.2 ApplicationContextAware 接口"></a>2.2 ApplicationContextAware 接口</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonService2</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) applicationContext.getBean(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现 ApplicationContextAware 接口，然后重写 setApplicationContext 方法，也能从该方法中获取到 spring 容器对象。</p></blockquote><ul><li><h4 id="2-3-ApplicationListener-接口"><a href="#2-3-ApplicationListener-接口" class="headerlink" title="2.3 ApplicationListener 接口"></a>2.3 ApplicationListener 接口</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonService3</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> &#123;</span><br><span class="line">applicationContext = event.getApplicationContext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) applicationContext.getBean(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-全局异常处理以前我们在开发接口时，如果出现异常，为了给用户一个更友好的提示，例如："><a href="#3-全局异常处理以前我们在开发接口时，如果出现异常，为了给用户一个更友好的提示，例如：" class="headerlink" title="3.全局异常处理以前我们在开发接口时，如果出现异常，为了给用户一个更友好的提示，例如："></a>3.全局异常处理以前我们在开发接口时，如果出现异常，为了给用户一个更友好的提示，例如：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">如果不做任何处理请求add接口结果直接报错：what？用户能直接看到错误信息？这种交互方式给用户的体验非常差，为了解决这个问题，我们通常会在接口中捕获异常：</span><br><span class="line"><span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        result = <span class="string">&quot;数据异常&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口改造后，出现异常时会提示：“数据异常”，对用户来说更友好。看起来挺不错的，但是有问题。。。如果只是一个接口还好，但是如果项目中有成百上千个接口，都要加上异常捕获代码吗？答案是否定的，这时全局异常处理就派上用场了：RestControllerAdvice。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ArithmeticException) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;数据异常&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;服务器内部异常&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        retur nnull;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只需在 handleException 方法中处理异常情况，业务接口中可以放心使用，不再需要捕获异常（有人统一处理了）。真是爽歪歪。</p></blockquote><h3 id="4-类型转换器"><a href="#4-类型转换器" class="headerlink" title="4.类型转换器"></a>4.类型转换器</h3><blockquote><p>spring 目前支持 3 中类型转换器：Converter&lt;S,T&gt;：将 S 类型对象转为 T 类型对象 ConverterFactory&lt;S, R&gt;：将 S 类型对象转为 R 类型及子类对象 GenericConverter：它支持多个 source 和目标类型的转化，同时还提供了 source 和目标类型的上下文，这个上下文能让你实现基于属性上的注解或信息来进行类型转换。这 3 种类型转换器使用的场景不一样，我们以 Converter&lt;S,T&gt;为例。假如：接口中接收参数的实体对象中，有个字段的类型是 Date，但是实际传参的是字符串类型：2021-01-03 10:20:15，要如何处理呢？第一步，定义一个实体 User：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Date registerDate;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//第二步，实现Converter接口：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(source)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                simpleDateFormat.parse(source);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三步，将新定义的类型转换器注入到spring容器中：</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> <span class="title class_">DateConverter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第四步，调用接口</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请求接口时 User 对象中 registerDate 字段会被自动转换成 Date 类型。</p></blockquote><h3 id="5-导入配置"><a href="#5-导入配置" class="headerlink" title="5.导入配置"></a>5.导入配置</h3><blockquote><p>有时我们需要在某个配置类中引入另外一些类，被引入的类也加到 spring 容器中。这时可以使用@Import 注解完成这个功能。如果你看过它的源码会发现，引入的类支持三种不同类型。但是我认为最好将普通类和@Configuration 注解的配置类分开讲解，所以列了四种不同类型：</p></blockquote><ul><li><h4 id="5-1-普通类这种引入方式是最简单的，被引入的类会被实例化-bean-对象。"><a href="#5-1-普通类这种引入方式是最简单的，被引入的类会被实例化-bean-对象。" class="headerlink" title="5.1 普通类这种引入方式是最简单的，被引入的类会被实例化 bean 对象。"></a>5.1 普通类这种引入方式是最简单的，被引入的类会被实例化 bean 对象。</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import(A.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过@Import 注解引入 A 类，spring 就能自动实例化 A 对象，然后在需要使用的地方通过@Autowired 注解注入即可：<br>@Autowired<br>private A a;<br>是不是挺让人意外的？不用加@Bean 注解也能实例化 bean。</p></blockquote><ul><li><h4 id="5-2-配置类这种引入方式是最复杂的，因为-Configuration-注解还支持多种组合注解，比如：-Import、-ImportResource、-PropertySource-等。"><a href="#5-2-配置类这种引入方式是最复杂的，因为-Configuration-注解还支持多种组合注解，比如：-Import、-ImportResource、-PropertySource-等。" class="headerlink" title="5.2 配置类这种引入方式是最复杂的，因为@Configuration 注解还支持多种组合注解，比如：@Import、@ImportResource、@PropertySource 等。"></a>5.2 配置类这种引入方式是最复杂的，因为@Configuration 注解还支持多种组合注解，比如：@Import、@ImportResource、@PropertySource 等。</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import(B.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> A <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import(AConfiguration.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过@Import 注解引入@Configuration 注解的配置类，会把该配置类相关@Import、@ImportResource、@PropertySource 等注解引入的类进行递归，一次性全部引入。</p></blockquote><ul><li><h4 id="5-3-ImportSelector-这种引入方式需要实现-ImportSelector-接口："><a href="#5-3-ImportSelector-这种引入方式需要实现-ImportSelector-接口：" class="headerlink" title="5.3 ImportSelector 这种引入方式需要实现 ImportSelector 接口："></a>5.3 ImportSelector 这种引入方式需要实现 ImportSelector 接口：</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.sue.cache.service.test13.A&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;CLASS_NAME&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import(AImportSelector.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式的好处是 selectImports 方法返回的是数组，意味着可以同时引入多个类，还是非常方便的。</p></blockquote><ul><li><h4 id="5-4-ImportBeanDefinitionRegistrar-这种引入方式需要实现-ImportBeanDefinitionRegistrar-接口："><a href="#5-4-ImportBeanDefinitionRegistrar-这种引入方式需要实现-ImportBeanDefinitionRegistrar-接口：" class="headerlink" title="5.4 ImportBeanDefinitionRegistrar 这种引入方式需要实现 ImportBeanDefinitionRegistrar 接口："></a>5.4 ImportBeanDefinitionRegistrar 这种引入方式需要实现 ImportBeanDefinitionRegistrar 接口：</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">rootBeanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(A.class);</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;a&quot;</span>, rootBeanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import(AImportBeanDefinitionRegistrar.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式是最灵活的，能在 registerBeanDefinitions 方法中获取到 BeanDefinitionRegistry 容器注册对象，可以手动控制 BeanDefinition 的创建和注册。</p></blockquote><h3 id="6-项目启动时有时候我们需要在项目启动时定制化一些附加功能"><a href="#6-项目启动时有时候我们需要在项目启动时定制化一些附加功能" class="headerlink" title="6.项目启动时有时候我们需要在项目启动时定制化一些附加功能"></a>6.项目启动时有时候我们需要在项目启动时定制化一些附加功能</h3><blockquote><p>比如：加载一些系统参数、完成初始化、预热本地缓存等，该怎么办呢？好消息是 springboot 提供了：CommandLineRunner、ApplicationRunner 这两个接口帮助我们实现以上需求。它们的用法还是挺简单的，以 ApplicationRunner 接口为例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> LoadDataService loadDataService;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      loadDataService.load();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现 ApplicationRunner 接口，重写 run 方法，在该方法中实现自己定制化需求。如果项目中有多个类实现了 ApplicationRunner 接口，他们的执行顺序要怎么指定呢？答案是使用@Order(n)注解，n 的值越小越先执行。当然也可以通过@Priority 注解指定顺序。</p></blockquote><h3 id="7-修改-BeanDefinition"><a href="#7-修改-BeanDefinition" class="headerlink" title="7.修改 BeanDefinition"></a>7.修改 BeanDefinition</h3><blockquote><p>Spring IOC 在实例化 Bean 对象之前，需要先读取 Bean 的相关属性，保存到 BeanDefinition 对象中，然后通过 BeanDefinition 对象，实例化 Bean 对象。如果想修改 BeanDefinition 对象中的属性，该怎么办呢？<br>答：我们可以实现 BeanFactoryPostProcessor 接口。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">defaultListableBeanFactory</span> <span class="operator">=</span> (DefaultListableBeanFactory) configurableListableBeanFactory;</span><br><span class="line">        <span class="type">BeanDefinitionBuilder</span> <span class="variable">beanDefinitionBuilder</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(User.class);</span><br><span class="line">        beanDefinitionBuilder.addPropertyValue(<span class="string">&quot;id&quot;</span>, <span class="number">123</span>);</span><br><span class="line">        beanDefinitionBuilder.addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;苏三说技术&quot;</span>);</span><br><span class="line">        defaultListableBeanFactory.registerBeanDefinition(<span class="string">&quot;user&quot;</span>, beanDefinitionBuilder.getBeanDefinition());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 postProcessBeanFactory 方法中，可以获取 BeanDefinition 的相关对象，并且修改该对象的属性。</p></blockquote><h3 id="8-初始化-Bean-前后有时，你想在初始化-Bean-前后，实现一些自己的逻辑。"><a href="#8-初始化-Bean-前后有时，你想在初始化-Bean-前后，实现一些自己的逻辑。" class="headerlink" title="8.初始化 Bean 前后有时，你想在初始化 Bean 前后，实现一些自己的逻辑。"></a>8.初始化 Bean 前后有时，你想在初始化 Bean 前后，实现一些自己的逻辑。</h3><blockquote><p>这时可以实现：BeanPostProcessor 接口。该接口目前有两个方法：postProcessBeforeInitialization 该在初始化方法之前调用。postProcessAfterInitialization 该方法再初始化方法之后调用。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">            ((User) bean).setUserName(<span class="string">&quot;苏三说技术&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果 spring 中存在 User 对象，则将它的 userName 设置成：苏三说技术。其实，我们经常使用的注解，比如：@Autowired、@Value、@Resource、@PostConstruct 等，是通过 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor 实现的。</p></blockquote><h3 id="9-初始化方法目前-spring-中使用比较多的初始化-bean-的方法有：使用-PostConstruct-注解实现-InitializingBean-接口"><a href="#9-初始化方法目前-spring-中使用比较多的初始化-bean-的方法有：使用-PostConstruct-注解实现-InitializingBean-接口" class="headerlink" title="9.初始化方法目前 spring 中使用比较多的初始化 bean 的方法有：使用@PostConstruct 注解实现 InitializingBean 接口"></a>9.初始化方法目前 spring 中使用比较多的初始化 bean 的方法有：使用@PostConstruct 注解实现 InitializingBean 接口</h3><ul><li><h3 id="9-1-使用-PostConstruct-注解"><a href="#9-1-使用-PostConstruct-注解" class="headerlink" title="9.1 使用@PostConstruct 注解"></a>9.1 使用@PostConstruct 注解</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AService</span> &#123;</span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;===初始化===&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在需要初始化的方法上增加@PostConstruct 注解，这样就有初始化的能力。</p></blockquote><ul><li><h3 id="9-2-实现-InitializingBean-接口"><a href="#9-2-实现-InitializingBean-接口" class="headerlink" title="9.2 实现 InitializingBean 接口"></a>9.2 实现 InitializingBean 接口</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BService</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===初始化===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现 InitializingBean 接口，重写 afterPropertiesSet 方法，该方法中可以完成初始化功能。</p></blockquote><h3 id="10-关闭容器前有时候，我们需要在关闭-spring-容器前，做一些额外的工作"><a href="#10-关闭容器前有时候，我们需要在关闭-spring-容器前，做一些额外的工作" class="headerlink" title="10.关闭容器前有时候，我们需要在关闭 spring 容器前，做一些额外的工作"></a>10.关闭容器前有时候，我们需要在关闭 spring 容器前，做一些额外的工作</h3><blockquote><p>比如：关闭资源文件等。这时可以实现 DisposableBean 接口，并且重写它的 destroy 方法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DService</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DisposableBean destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean afterPropertiesSet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样 spring 容器销毁前，会调用该 destroy 方法，做一些额外的工作。通常情况下，我们会同时实现 InitializingBean 和 DisposableBean 接口，重写初始化方法和销毁方法。</p></blockquote><h3 id="11-自定义作用域"><a href="#11-自定义作用域" class="headerlink" title="11.自定义作用域"></a>11.自定义作用域</h3><blockquote><p>我们都知道 spring 默认支持的 Scope 只有两种：singleton 单例，每次从 spring 容器中获取到的 bean 都是同一个对象。prototype 多例，每次从 spring 容器中获取到的 bean 都是不同的对象。spring web 又对 Scope 进行了扩展，增加了：RequestScope 同一次请求从 spring 容器中获取到的 bean 都是同一个对象。SessionScope 同一个会话从 spring 容器中获取到的 bean 都是同一个对象。即便如此，有些场景还是无法满足我们的要求。比如，我们想在同一个线程中从 spring 容器获取到的 bean 都是同一个对象，该怎么办？这就需要自定义 Scope 了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//第一步实现Scope接口：</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalScope</span> <span class="keyword">implements</span> <span class="title class_">Scope</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadLocal</span> <span class="variable">THREAD_LOCAL_SCOPE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String name, ObjectFactory&lt;?&gt; objectFactory)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> THREAD_LOCAL_SCOPE.get();</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> objectFactory.getObject();</span><br><span class="line">        THREAD_LOCAL_SCOPE.set(object);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">remove</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        THREAD_LOCAL_SCOPE.remove();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerDestructionCallback</span><span class="params">(String name, Runnable callback)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveContextualObject</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConversationId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步将新定义的Scope注入到spring容器中：</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        beanFactory.registerScope(<span class="string">&quot;threadLocalScope&quot;</span>, <span class="keyword">new</span> <span class="title class_">ThreadLocalScope</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步使用新定义的Scope：</span></span><br><span class="line"><span class="meta">@Scope(&quot;threadLocalScope&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的简单使用</title>
      <link href="/2022/09/20/redis-operate/"/>
      <url>/2022/09/20/redis-operate/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="redis-的基本操作"><a href="#redis-的基本操作" class="headerlink" title="redis 的基本操作"></a>redis 的基本操作</h3><blockquote><p>首先安装 redis</p></blockquote><ul><li><p><strong>使用 docker 安装 redis</strong></p><ul><li>1.在/usr/local 的文件下建一个 redis 的文件夹，以便于后面对 redis 的管理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 执行命令</span><br><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line"># 创建文件夹</span><br><span class="line">mkdie redis</span><br></pre></td></tr></table></figure><ul><li>2.进入创建的文件夹</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 进入文件夹</span><br><span class="line">cd redis/</span><br></pre></td></tr></table></figure><ul><li>3.编写 docker-compose 配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.3&#x27;</span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: redis</span><br><span class="line">    container_name: redis</span><br><span class="line">    privileged: true</span><br><span class="line">    ports:</span><br><span class="line">      - 6379:6379</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asia/Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data</span><br><span class="line">      - ./conf/redis.conf:/etc/redis/redis.conf</span><br><span class="line">      - ./logs:/logs</span><br><span class="line">    command:</span><br><span class="line">      --requirepass &quot;xxxxxxx&quot; #这一行是设置密码</span><br></pre></td></tr></table></figure><ul><li>拉取镜像并启动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 执行操作</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"># 查看镜像是否启动</span><br><span class="line">docker ps</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.3zncg9gh0340.webp" alt="image"></p><blockquote><p>出现这个说明 redis 的镜像就启动起来了</p></blockquote></li><li><p><strong>redis 的简单操作</strong></p><p>1.进入 redis 的客户端</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器的id redis-cli</span><br></pre></td></tr></table></figure><p>2.简单的设置一个值测试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set test 123</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.660jbcci0d40.webp" alt="image"></p><blockquote><p>出现上图显示的结果，说明需要密码认证</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 执行这行命令即可认证通过。xxxx就是之前配置文件设置的密码</span><br><span class="line">auth xxxx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.7j49dzrmwjc0.webp" alt="image"></p><blockquote><p>出现这个结果，说明认证通过</p></blockquote><p>3.redis 的一些命令操作（redis 都是基于键值对的操作）</p><ul><li>（1）增加一条数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set test 123</span><br></pre></td></tr></table></figure><ul><li>（2）查看添加的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get test</span><br></pre></td></tr></table></figure><ul><li>（3）删除添加的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del test</span><br></pre></td></tr></table></figure><ul><li>（4）查看所有的 key</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure><ul><li>（5）查看以某个字符开头的所有 key</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys j*</span><br></pre></td></tr></table></figure><ul><li>（6）查看以某个字符结尾的所有 key</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *j</span><br></pre></td></tr></table></figure><ul><li>（7）选择要使用的 db</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 2 # 意思就是选择第二库使用，redis默认使用第0个库，总共会生成16个库</span><br></pre></td></tr></table></figure><ul><li>（8）清空所有的库数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure><ul><li>（9）清空对应库的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure><ul><li>（10）添加 list 集合数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 这里如果含有中文的话可能会出现乱码，这个时候进入redis的客户端的时候要加上一个指令</span><br><span class="line"># 先退出客户端</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 重新进入客户端</span><br><span class="line">docker exec -it 容器的id redis-cli --raw</span><br><span class="line"></span><br><span class="line">lpush list &#x27;1&#x27; &#x27;2&#x27; &#x27;test&#x27; &#x27;测试中文&#x27;</span><br></pre></td></tr></table></figure><ul><li>（11）查看 key 的类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type key</span><br></pre></td></tr></table></figure><ul><li>（12）判断 key 是否存在</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists key</span><br></pre></td></tr></table></figure><ul><li>（13）设置 key 的失效时间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expire key 2 # 2是设置的时间为2s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建属于自己的私有云盘</title>
      <link href="/2022/09/03/zpan/"/>
      <url>/2022/09/03/zpan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="打造属于自己的私有云盘（zpan）"><a href="#打造属于自己的私有云盘（zpan）" class="headerlink" title="打造属于自己的私有云盘（zpan）"></a>打造属于自己的私有云盘（zpan）</h1><blockquote><p>ZPan 致力于打造一款不限速的网盘系统，因此采用客户端直连云存储的方式进行设计。目前 ZPan 支持所有兼容 S3 协议的云存储平台，您可以选用您熟悉的平台来驱动 ZPan。</p></blockquote><h2 id="zpan-的特点"><a href="#zpan-的特点" class="headerlink" title="zpan 的特点"></a>zpan 的特点</h2><ul><li><p>完全不受服务器带宽限制</p></li><li><p>支持所有兼容 S3 协议的云存储</p></li><li><p>支持文件及文件夹管理</p></li><li><p>支持文件及文件夹分享（未登录可访问）</p></li><li><p>支持文档预览及音视频播放</p></li><li><p>支持多用户存储空间控制</p></li><li><p>支持多语言</p></li></ul><h2 id="zpan-云存储搭建"><a href="#zpan-云存储搭建" class="headerlink" title="zpan 云存储搭建"></a>zpan 云存储搭建</h2><ul><li>准备一台云服务器（这里我用腾讯云为例）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#创建工作目录</span><br><span class="line"></span><br><span class="line">mkdir zpan</span><br><span class="line"></span><br><span class="line">mkdir minio</span><br><span class="line"></span><br><span class="line">#添加docker-compose配置文件</span><br><span class="line"></span><br><span class="line">version: &#x27;3.7&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  minio:</span><br><span class="line">    image: minio/minio:latest</span><br><span class="line">    command: server /data --console-address=&quot;:9001&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9000:9000&quot;</span><br><span class="line">      - &quot;9001:9001&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - minio:/data</span><br><span class="line">    environment:</span><br><span class="line">      - MINIO_ROOT_USER=XXXX</span><br><span class="line">      - MINIO_ROOT_PASSWORD=XXXXX</span><br><span class="line">      - MINIO_DOMAIN=minio.localhost</span><br><span class="line"></span><br><span class="line">  zpan:</span><br><span class="line">    image: saltbo/zpan:latest</span><br><span class="line">    volumes:</span><br><span class="line">      - zpcfg:/etc/zpan</span><br><span class="line">      - zpdata:/srv # only for sqlite</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8222:8222&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - minio</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  minio:</span><br><span class="line">  zpcfg:</span><br><span class="line">  zpdata:</span><br><span class="line"></span><br><span class="line">#执行命令拉取镜像并启动</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>之后可以登录访问：http:localhost:8222</li></ul><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.zmetdlw5whs.webp" alt="image"></p><ul><li>配置数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 这里配置mysql数据库</span><br><span class="line"></span><br><span class="line">user:pass@tcp(127.0.0.1:3306)/zpan?charset=utf8mb4&amp;parseTime=True&amp;loc=Local //这里的user和pass代表你创建数据库的用户名和密码</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>安装好后，创建存储</li></ul><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.1zkthvw0kfpc.webp" alt="image"></p><ul><li>需要使用腾讯云创建存储桶</li></ul><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.3zjpap49ecg0.webp" alt="image"></p><ul><li>进入访问管理页面创建密钥</li></ul><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.6t1i6fq87l40.webp" alt="image"></p><ul><li>配置 zpan 的存储</li></ul><blockquote><p>注意:这里的接入点配置，是访问域名的从 cos 到最后面那段，如下图：</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.68jppkxo1800.webp" alt="image"></p><ul><li>再将秘钥的 id 和 key 配置进去</li></ul><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.3buew2pte6g0.webp" alt="image"></p><h2 id="配置完成后直接访问-http-localhost-8222-地址，得到如下图效果"><a href="#配置完成后直接访问-http-localhost-8222-地址，得到如下图效果" class="headerlink" title="配置完成后直接访问 http:localhost:8222 地址，得到如下图效果"></a>配置完成后直接访问 http:localhost:8222 地址，得到如下图效果</h2><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.5nc0zgtk1kg0.webp" alt="image"></p><blockquote><p>出现这个结果说明 zpan 云盘已经搭建成功，如果在云服务器上搭建的，申请一个域名然后备案下域名，云盘就可以随时访问了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> zpan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zpan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo更换闪烁之狐的主题</title>
      <link href="/2022/08/30/hexo-sszh/"/>
      <url>/2022/08/30/hexo-sszh/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo-博客安装-Matery-主体"><a href="#hexo-博客安装-Matery-主体" class="headerlink" title="hexo 博客安装 Matery 主体"></a><a href="https://blinkfox.github.io/">hexo 博客安装 Matery 主体</a></h1><blockquote><p>进入主体的官网搜索：（<a href="https://hexo.io/themes/%EF%BC%89%E3%80%82%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E7%82%B9%E5%87%BB%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%90%8D%E7%A7%B0%E7%9B%B4%E6%8E%A5%E5%AE%9A%E4%BD%8D%E5%88%B0%E4%B8%BB%E4%BD%93">https://hexo.io/themes/）。也可以直接点击上面的名称直接定位到主体</a></p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.2m1lp2soxmm0.webp" alt="image"></p><h3 id="点击下载主体，拿到主体的安装包，解压得到如下文件"><a href="#点击下载主体，拿到主体的安装包，解压得到如下文件" class="headerlink" title="点击下载主体，拿到主体的安装包，解压得到如下文件"></a>点击下载主体，拿到主体的安装包，解压得到如下文件</h3><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.3xszbjcu98k0.webp" alt="image"></p><h3 id="将解压后的目录放到你博客的（themes-文件夹下）"><a href="#将解压后的目录放到你博客的（themes-文件夹下）" class="headerlink" title="将解压后的目录放到你博客的（themes 文件夹下）"></a>将解压后的目录放到你博客的（themes 文件夹下）</h3><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.3zr35e79dia0.webp" alt="image"></p><h3 id="修改根目录下的配置文件-config-yml"><a href="#修改根目录下的配置文件-config-yml" class="headerlink" title="修改根目录下的配置文件_config.yml"></a>修改根目录下的配置文件_config.yml</h3><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.54gizcbkqxk0.webp" alt="image"></p><blockquote><p>调整如下图的位置,把主体文件夹名称换成你下载解压后的文件夹的名称即可</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.28xv0on4ttc0.webp" alt="image"></p><blockquote><p>做完这些步骤之后可以去访问下博客</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><blockquote><p>启动后去访问下，如果你发现你的标签、分类、关于等点击时候找不到页面的话，说明你少初始化一些文件，下面说下解决的办法</p></blockquote><ul><li>首先你可以去主体的配置文件下看下菜单的配置，如下图</li></ul><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.3p26wg3zs7g0.webp" alt="image"></p><ul><li><p>上面图片显示的就是主体菜单显示的配置，你可以按自己的需要取用，或者也可以自己添加，但是要注意这些菜单需要初始化一下，不然在打包静态文件的时候这些文件目录打不进去，在页面访问的时候自然也就访问不到了</p></li><li><p>下面来初始化这个文件，按自己需要的菜单进行初始化</p><ul><li>首先进入根目录的 source 文件夹下创建菜单配置的目录</li></ul><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.3j5sz2wqfkk0.webp" alt="image"></p><ul><li>_post 的文件夹放的就是要写的博客文件，about 文件放置的就是关于的文件，categories 放置的就是分类的文件，tags 放置的就是标签的文件，里面都需要有一个初始化文件，如下图：</li></ul><h4 id="about"><a href="#about" class="headerlink" title="about"></a>about</h4><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.4xn94gavad80.webp" alt="image"></p></li></ul><blockquote><p>文件内容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2022-08-28 14:44:49</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">layout: &quot;about&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h4><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.6cyqeocobyc0.webp" alt="image"></p><blockquote><p>文件内容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2022-08-28 14:44:09</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h4><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.1lyyld8tmv5s.webp" alt="image"></p><blockquote><p>文件内容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-08-28 15:02:56</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p>然后再执行下命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><blockquote><p>此时再去访问的话那些菜单就可以访问了，效果如下：</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.33npladg54a0.webp" alt="image"></p><h3 id="如果你使用搜索功能发现不能使用，那可能需要安装一下插件并在配置文件中开启"><a href="#如果你使用搜索功能发现不能使用，那可能需要安装一下插件并在配置文件中开启" class="headerlink" title="如果你使用搜索功能发现不能使用，那可能需要安装一下插件并在配置文件中开启"></a>如果你使用搜索功能发现不能使用，那可能需要安装一下插件并在配置文件中开启</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#本主题中还使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line"></span><br><span class="line">#在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项</span><br><span class="line"></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#中文链接转拼音（建议安装）</span><br><span class="line">#如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，#且 gitment 评论对中文链接也不支持。我们可以用 hexo-permalink-pinyin Hexo 插件#使在生成文章时生成中文拼音的永久链接。</span><br><span class="line"></span><br><span class="line">npm i hexo-permalink-pinyin --save</span><br><span class="line"></span><br><span class="line">#在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置</span><br><span class="line"></span><br><span class="line">permalink_pinyin:</span><br><span class="line">  enable: true</span><br><span class="line">  separator: &#x27;-&#x27; # default: &#x27;-&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>配置文件如下图：</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.31pzxv9wm6e0.webp" alt="image"></p><blockquote><p>查询效果如下：</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.hyj470ly6pc.webp" alt="image"></p><ul><li>至此一个简易的换主体博客就完成了</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>liunx安装node环境</title>
      <link href="/2022/08/23/liunx-an-zhuang-node/"/>
      <url>/2022/08/23/liunx-an-zhuang-node/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-查看-node-的官网：https-nodejs-org-en-download"><a href="#1-查看-node-的官网：https-nodejs-org-en-download" class="headerlink" title="1.查看 node 的官网：https://nodejs.org/en/download/"></a>1.查看 node 的官网：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></h2><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.76zh2vxzi3o0.webp" alt="image"></p><h2 id="2-使用-wget-命令去下载-node，获取最新的-node-js-版本"><a href="#2-使用-wget-命令去下载-node，获取最新的-node-js-版本" class="headerlink" title="2.使用 wget 命令去下载 node，获取最新的 node.js 版本"></a>2.使用 wget 命令去下载 node，获取最新的 node.js 版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#先进入local文件下</span><br><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line">#创建node的文件夹</span><br><span class="line">mkdir node</span><br><span class="line"></span><br><span class="line">#然后进入node文件下</span><br><span class="line">cd node</span><br><span class="line"></span><br><span class="line">#在node文件下使用wget命令下载node包</span><br><span class="line">wget https://nodejs.org/dist/v16.17.0/node-v16.17.0-linux-x64.tar.xz</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-解压当前的压缩包"><a href="#3-解压当前的压缩包" class="headerlink" title="3.解压当前的压缩包"></a>3.解压当前的压缩包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf node-v16.17.0-linux-x64.tar.xz</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这个文件是已经编译好的 node 文件，不需要再去编译，只要在环境变量中配置一下就可以使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#修改etc下的profile文件</span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/images@master/images/image.2qu0h1funl20.webp" alt="image"></p><h2 id="4-在-profile-文件的最后位置加上这个配置即可"><a href="#4-在-profile-文件的最后位置加上这个配置即可" class="headerlink" title="4.在 profile 文件的最后位置加上这个配置即可"></a>4.在 profile 文件的最后位置加上这个配置即可</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/node/node-v14.15.3-linux-x64/bin</span><br></pre></td></tr></table></figure><blockquote><p><font style='color:red'>注意：</font>这个路径是解压后的文件下 bin 的路径，以你自己的路径为准</p></blockquote><h2 id="5-最后-source-一下这个文件，让这个文件生效"><a href="#5-最后-source-一下这个文件，让这个文件生效" class="headerlink" title="5.最后 source 一下这个文件，让这个文件生效"></a>5.最后 source 一下这个文件，让这个文件生效</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云轻量服务器部署fireshare</title>
      <link href="/2022/08/21/liunx-system/"/>
      <url>/2022/08/21/liunx-system/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="腾讯云轻量服务器"><a href="#腾讯云轻量服务器" class="headerlink" title="腾讯云轻量服务器"></a><a href="https://cloud.tencent.com/">腾讯云轻量服务器</a></h1><blockquote><p>购买轻量服务器，这里以免费体验的服务器来演示</p></blockquote><h2 id="1-选择要安装的服务器"><a href="#1-选择要安装的服务器" class="headerlink" title="1.选择要安装的服务器"></a>1.选择要安装的服务器</h2><ul><li>（1）这里使用 docker 容器部署，所以直接安装含有 docker 基础镜像的服务器</li></ul><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.41sql6epvhm0.webp" alt="image"></p><ul><li>（2）安装完成后，如下图所示</li></ul><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.5gf3z0mq1j00.webp" alt="image"></p><ul><li>（3）点击登录，进入腾讯云的远程连接管理界面，当然你也可以使用自己的 xshell 或者 findshell 等等其他的远程连接工具连接</li></ul><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.29myx2469q68.webp" alt="image"></p><blockquote><p>点击登录后直接显示默认的登录的用户，直接登录即可。注意：这里要是想使用其他远程连接工具的话，可以通过 ubuntu 这个用户来连接，但是要设置下密码。</p></blockquote><ul><li>（4）切换 root 用户</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.4far8xd8ubu0.webp" alt="image"></p><ul><li>（5）更新下软件包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update -y</span><br></pre></td></tr></table></figure><ul><li>（6）更新下镜像文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt upgrade -y</span><br></pre></td></tr></table></figure><ul><li>（7）安装下 swap,如果系统内存配置不够可以使用这个设置一下内存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O box.sh  https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh &amp;&amp; chmod +x box.sh &amp;&amp; clear &amp;&amp; ./box.sh</span><br></pre></td></tr></table></figure><ul><li>（8）建 docker 的镜像管理目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/data/docker_data</span><br></pre></td></tr></table></figure><ul><li>（9）进入 docker_data 下，建 fireshare 的文件夹和 docker-compose 的配置文件，下载 fireshare 的镜像文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#进入文件夹</span><br><span class="line">cd /root/data/docker_data</span><br><span class="line"></span><br><span class="line">#创建文件夹</span><br><span class="line">mkdir fireshare</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#添加docker-compose 配置文件</span><br><span class="line">version: &#x27;3.7&#x27;</span><br><span class="line">services:</span><br><span class="line">   fireshare:</span><br><span class="line">        container_name: fireshare</span><br><span class="line">        image: shaneisrael/fireshare:latest  #latest表示最新版本</span><br><span class="line">        ports:</span><br><span class="line">          - &quot;8080:80&quot;  #冒号左边的端口可以自己修改成服务器未占用的端口，冒号右边不要修改</span><br><span class="line">        volumes:</span><br><span class="line">          - ./data:/data</span><br><span class="line">          - ./processed:/processed</span><br><span class="line">          - ./videos:/videos</span><br><span class="line">        environment:</span><br><span class="line">          - ADMIN_USERNAME=*** #自己设置一个用户名</span><br><span class="line">          - ADMIN_PASSWORD=***** #自己设置一个密码</span><br><span class="line"></span><br><span class="line">#下再fireshare的镜像文件,并启动</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>（10）安装完成后可以使用公网 ip+端口去访问</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://公网ip:8080</span><br></pre></td></tr></table></figure><blockquote><p>注意：这个时候可能无法访问，需要去服务器管理页面设置下防火墙，轻量应用服务器这个端口没有默认开放，需要手动设置开放，如下图：</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.1tnn7mop00w0.webp" alt="image"></p><blockquote><p>配置完这个端口再使用http://公网ip:8080访问就会出现下图效果</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.7jzklqempxs0.webp" alt="image"></p><blockquote><p>出现这样的显示，说明这个搭建成功了,现在就可以上传视频分享了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch</title>
      <link href="/2022/08/14/elasticsearch/"/>
      <url>/2022/08/14/elasticsearch/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker-安装-elasticsearch-以及简单的使用"><a href="#docker-安装-elasticsearch-以及简单的使用" class="headerlink" title="docker 安装 elasticsearch 以及简单的使用"></a>docker 安装 elasticsearch 以及简单的使用</h1><h2 id="1-elasticsearch-的安装"><a href="#1-elasticsearch-的安装" class="headerlink" title="1.elasticsearch 的安装"></a>1.elasticsearch 的安装</h2><ul><li>向 docker 容器 pullelasticsearch</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.7.0</span><br></pre></td></tr></table></figure><ul><li>查看安装后的镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.5rgbb4j4bmk0.webp"></p><blockquote><p>出现上图结果说明 elasticsearch 镜像已经安装完成</p></blockquote><ul><li>启动 elasticsearch 服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name elasticsearch -d -e ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot; -e &quot;discovery.type=single-node&quot; -p 9200:9200 -p 9300:9300 elasticsearch:7.7.0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.57gjis4qkdo0.webp"></p><blockquote><p>注意：这个地方的第一个端口指的是 http 外部的访问接口，第二端口指的是集群间的通信端口，使用(<a href="http://localhost:9200)访问时出现上图结果，说明">http://localhost:9200)访问时出现上图结果，说明</a> elasticsearch 服务启动成功</p></blockquote><h2 id="2-elasticsearch-的使用"><a href="#2-elasticsearch-的使用" class="headerlink" title="2.elasticsearch 的使用"></a>2.elasticsearch 的使用</h2><ul><li>（1）增加索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#put</span><br><span class="line">http://localhost:9200/test1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.41i07r23ncq0.webp"></p><h5 id="lt-1-gt-增加索引扩展-增加映射属性，elasticsearch7-以上都不使用关键字去创建映射属性了-（注意这个索引是没有创建过的索引）"><a href="#lt-1-gt-增加索引扩展-增加映射属性，elasticsearch7-以上都不使用关键字去创建映射属性了-（注意这个索引是没有创建过的索引）" class="headerlink" title="&lt;1&gt; 增加索引扩展(增加映射属性，elasticsearch7 以上都不使用关键字去创建映射属性了)（注意这个索引是没有创建过的索引）"></a>&lt;1&gt; 增加索引扩展(增加映射属性，elasticsearch7 以上都不使用关键字去创建映射属性了)（注意这个索引是没有创建过的索引）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">  #put</span><br><span class="line">  http://localhost:9200/test1</span><br><span class="line"></span><br><span class="line"> //传的jason数据</span><br><span class="line"> &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;attrs&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;nested&quot;,</span><br><span class="line">                &quot;properties&quot;: &#123;</span><br><span class="line">                    &quot;attrId&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;attrName&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;attrValueId&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;attrValueName&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;tags&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;nested&quot;,</span><br><span class="line">                &quot;properties&quot;: &#123;</span><br><span class="line">                    &quot;tagId&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;seq&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;brandId&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;brandImg&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;brandName&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;code&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                &quot;fields&quot;: &#123;</span><br><span class="line">                    &quot;keyword&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                        &quot;ignore_above&quot;: 256</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;commentNum&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;createTime&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;date&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;hasStock&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;boolean&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;imgUrls&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;index&quot;: false,</span><br><span class="line">                &quot;doc_values&quot;: false</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;mainImgUrl&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                &quot;fields&quot;: &#123;</span><br><span class="line">                    &quot;keyword&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                        &quot;ignore_above&quot;: 256</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;marketPriceFee&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;priceFee&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;saleNum&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;sellingPoint&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">                &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;shopId&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;shopImg&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;index&quot;: false,</span><br><span class="line">                &quot;doc_values&quot;: false</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;shopName&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">                &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;shopType&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;shopPrimaryCategoryId&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;shopPrimaryCategoryName&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;shopSecondaryCategoryId&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;shopSecondaryCategoryName&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;primaryCategoryId&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;primaryCategoryName&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;secondaryCategoryId&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;secondaryCategoryName&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;categoryId&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;categoryName&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;spuId&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;spuName&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">                &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;spuStatus&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;success&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;boolean&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>出现图中返回结果说明索引添加成功。注意：增加索引是幂等性的，需要使用 put 请求</p></blockquote><ul><li>（2）查看增加的索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#get</span><br><span class="line">http://localhost:9200/_cat/indices?v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.697fzevfjro0.webp"></p><p>-（3）删除索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#delete</span><br><span class="line">http://localhost:9200/test1</span><br></pre></td></tr></table></figure><p>-（4）向索引中添加文档数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#put(1001是指定的id,是幂等性的，所以可以使用put)</span><br><span class="line">http://localhost:9200/test1/_doc/1001</span><br><span class="line"></span><br><span class="line">#传递的参数</span><br><span class="line">&#123;</span><br><span class="line"> &quot;name&quot;:&quot;test数据&quot;,</span><br><span class="line"> &quot;age&quot;:12</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（5）查询所有的添加的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#get</span><br><span class="line">http://localhost:9200/test/_search</span><br></pre></td></tr></table></figure><ul><li>（6）根据 id 查询文档的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#get</span><br><span class="line">http://localhost:9200/test/_doc/1001</span><br></pre></td></tr></table></figure><ul><li>（7）修改文档数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#put（_doc后面跟id这种是全覆盖修改，幂等性）</span><br><span class="line">http://localhost:9200/test/_doc/1001</span><br><span class="line"></span><br><span class="line">#传递的参数</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;覆盖&quot;,</span><br><span class="line">    &quot;age&quot;:12,</span><br><span class="line">    &quot;test&quot;:&quot;wq&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（8）局部覆盖修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#post（_update这种是局部覆盖修改，非幂等性）</span><br><span class="line">http://localhost:9200/test/_update/1001</span><br><span class="line"></span><br><span class="line">#传递的参数</span><br><span class="line">&#123;</span><br><span class="line">    &quot;doc&quot;:&#123;</span><br><span class="line">        &quot;name&quot;:&quot;局部覆盖&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（9）删除文档数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#delete</span><br><span class="line">http://localhost:9200/test/_doc/1001</span><br></pre></td></tr></table></figure><ul><li>（10）根据条件查询文档数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#post</span><br><span class="line">http://localhost:9200/test/_search</span><br><span class="line"></span><br><span class="line">#传递的参数</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;name&quot;:&quot;部分覆盖&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#这种是查询所有的文档数据</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match_all&quot;:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（11）分页查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#post</span><br><span class="line">http://localhost:9200/test/_search</span><br><span class="line"></span><br><span class="line">#传递的参数</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match_all&quot;:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;from&quot;:0,#标识第几页</span><br><span class="line">    &quot;size&quot;:2#表示一页展示多少数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（12）查询时规定要查询的字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#post</span><br><span class="line">http://localhost:9200/test/_search</span><br><span class="line"></span><br><span class="line">#传递的参数</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match_all&quot;:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;from&quot;:0,#标识第几页</span><br><span class="line">    &quot;size&quot;:2,#表示一页展示多少数据</span><br><span class="line">    &quot;_source&quot;:[&quot;name&quot;] #标识要查询的字段</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（13）排序查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#post</span><br><span class="line">http://localhost:9200/test/_search</span><br><span class="line"></span><br><span class="line">#传递的参数</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match_all&quot;:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;from&quot;:0,#标识第几页</span><br><span class="line">    &quot;size&quot;:2,#表示一页展示多少数据</span><br><span class="line">    &quot;_source&quot;:[&quot;name&quot;], #标识要查询的字段</span><br><span class="line">    &quot;sort&quot;:&#123;</span><br><span class="line">        &quot;age&quot;:&#123; #要排序的字段</span><br><span class="line">            &quot;order&quot;:&quot;asc&quot; #排序的规则</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（14）条件组合查询（相当于 SQL 里面的 and）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#post</span><br><span class="line">http://localhost:9200/test/_search</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#传递的参数</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;must&quot;:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;:&#123;</span><br><span class="line">                        &quot;name&quot;:&quot;局部覆盖&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;:&#123;</span><br><span class="line">                        &quot;age&quot;:12</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;from&quot;:0,//从某页开始</span><br><span class="line">    &quot;size&quot;:5//每页查询多少条</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（14）条件组合查询（相当于 SQL 里面的 or）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#post</span><br><span class="line">http://localhost:9200/test/_search</span><br><span class="line"></span><br><span class="line">#传递的参数</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;should&quot;:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;:&#123;</span><br><span class="line">                        &quot;name&quot;:&quot;局部覆盖&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;:&#123;</span><br><span class="line">                        &quot;age&quot;:12</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;from&quot;:0,//从某页开始</span><br><span class="line">    &quot;size&quot;:5//每页查询多少条</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（15）文档范围查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#post</span><br><span class="line">http://localhost:9200/test/_search</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#传递的参数</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">           &quot;filter&quot;:&#123;</span><br><span class="line">               &quot;range&quot;:&#123;</span><br><span class="line">                   &quot;age&quot;:&#123;</span><br><span class="line">                       &quot;gt&quot;:11</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;from&quot;:0,//从某页开始</span><br><span class="line">    &quot;size&quot;:5//每页查询多少条</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>（16）文档查询结果高亮显示</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#post</span><br><span class="line">http://localhost:9200/test/_search</span><br><span class="line"></span><br><span class="line">#传递的参数</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">       &quot;match_phrase&quot;:&#123;</span><br><span class="line">           &quot;name&quot;:&quot;局部&quot;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;:&#123;</span><br><span class="line">        &quot;fields&quot;:&#123;</span><br><span class="line">            &quot;name&quot;:&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2022/08/07/python/"/>
      <url>/2022/08/07/python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python-整合-redis-的简单使用"><a href="#python-整合-redis-的简单使用" class="headerlink" title="python 整合 redis 的简单使用"></a>python 整合 redis 的简单使用</h1><ul><li><strong>1.安装 redis 要使用的模块</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br><span class="line"></span><br><span class="line">pip install python-redis</span><br></pre></td></tr></table></figure><ul><li>2.<strong>在项目中导入 redis 的模块</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br></pre></td></tr></table></figure><ul><li>3.<strong>配置 redis 的连接</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 两种配置方式都可以使用</span><br><span class="line">import redis</span><br><span class="line"></span><br><span class="line">kwargs = &#123;</span><br><span class="line">    &#x27;host&#x27;: ip,</span><br><span class="line">    &#x27;port&#x27;: 6379,</span><br><span class="line">    &#x27;decode_responses&#x27;: True,</span><br><span class="line">    &#x27;retry_on_timeout&#x27;: 3, #重试次数</span><br><span class="line">    &#x27;max_connections&#x27;: 1024  # 默认2^31</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(**kwargs)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.flushdb</span><br><span class="line"># pool = redis.ConnectionPool(decode_responses=True)                   # 建立连接池</span><br><span class="line"># r = redis.Redis(connection_pool=pool,host=ip, port=6379)   # 从连接池获取连接</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>4.<strong>以爬取百度的图片为演示列子</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line">from data import redisDB #这个是上面配置封装的模块</span><br><span class="line"></span><br><span class="line">keywords = &quot;风景图片自然&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getImages():</span><br><span class="line">    url = f&#x27;https://image.baidu.com/search/index?ct=201326592&amp;tn=baiduimage&amp;word=&#123;keywords&#125;&amp;pn=&amp;spn=&amp;ie=utf-8&amp;oe=utf-8&amp;cl=2&amp;lm=-1&amp;fr=ala&amp;se=&amp;sme=&amp;cs=&amp;os=&amp;objurl=&amp;di=&amp;tt=&amp;gsm=5a&amp;dyTabStr=MCwzLDIsNiwxLDQsNSw3LDgsOQ%3D%3D&#x27;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &#x27;Accept&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;,</span><br><span class="line">        &#x27;user-agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=url, headers=headers, timeout=5)</span><br><span class="line">    content = re.findall(&quot;&#x27;imgData&#x27;,(.*?),&#123;&#125;]&#125;&quot;, response.text)[0] + &quot;,&#123;&#125;]&#125;&quot;</span><br><span class="line">    jsonObj = json.loads(content)[&#x27;data&#x27;]</span><br><span class="line">    for image in jsonObj:</span><br><span class="line">        try:</span><br><span class="line">            num = image[&#x27;thumbURL&#x27;].split(&#x27;,&#x27;)[0].split(&#x27;=&#x27;)[1]</span><br><span class="line">            redisDB.r.set(&quot;image:&quot;+num,image[&#x27;thumbURL&#x27;])</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;图片不存在&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>操作的结果</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.55uclnbxhmk0.webp"></p><blockquote><p>每个 url 都是一张图片（图中的连接如下图，这个 url 可能时刻在变化）</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.11vxtw1coffk.webp"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tabby</title>
      <link href="/2022/07/27/tabby/"/>
      <url>/2022/07/27/tabby/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="性能强大且优雅的远程连接工具-tabby"><a href="#性能强大且优雅的远程连接工具-tabby" class="headerlink" title="性能强大且优雅的远程连接工具 tabby"></a><a href="https://github.com/Eugeny/tabby/releases/tag/v1.0.164">性能强大且优雅的远程连接工具 tabby</a></h1><blockquote><p>点击名称可跳转 GitHub 下载各个版本的安装包</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.243361vn98kg.webp"></p><ul><li><p>windows 版的安装程序，下载双击直接下一步安装即可</p></li><li><p>安装完成</p><ul><li><p>设置步骤</p><ul><li><p>(1)<br><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.5mftv62bmq40.webp"></p></li><li><p>(2)<br><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.6ml87xubf4w0.webp"></p></li><li><p>(3)<br><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.387c79fg348.webp"></p></li><li><p>(4)<br><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.5ya6fngeyd40.webp"></p></li><li><p>(5)<br><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.5ya6fngeyd40.webp"></p></li><li><p>(7)<br><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.7987qiwxqhw0.webp"></p></li><li><p>(6)<br><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.6mrx9dj2nhk0.webp"></p></li><li><p>(7)<br><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.6mrx9dj2nhk0.webp"></p></li><li><p>(8)<br><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.68w7vxdwz9o0.webp"></p></li><li><p>(9)<br><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.5walfnk96ok0.webp"></p></li></ul><blockquote><p>至此，安装和配置远程服务器完毕</p></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> tabby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tabby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>liunx磁盘扩容</title>
      <link href="/2022/07/24/liunx-kuorong/"/>
      <url>/2022/07/24/liunx-kuorong/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>今天在用 liunx 下载插件的时候突然报磁盘空间不足，之后不管是切换目录，关机重启什么的，都没办法使用，之后使用”rm -f xxx”到指定的文件下删除一些日志后，释放了一些空间才可以正常使用，但是这个并不能管多久，稍微使用一下日志记多了空间就又开始不足了，后来就去网上查了下，原来是一开始没做分区，分配的 60 多个 G 并没有给根目录。下面就来做来分区给根目录扩个容。</p></blockquote><ul><li>首先查看下磁盘的情况</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看当前磁盘的使用情况</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.5zl59b2z23g0.webp"></p><ul><li>看下分区情况</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.6phzsa8p0480.webp"></p><blockquote><p>从图中明显可以看出这个默认分配的空间只有十几个 G，而我在虚拟机中设置的是 90G,显然我还有很多空间是没有用到的</p></blockquote><ul><li>首先对磁盘进行分区</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.5y3s11gfr7w0.webp"></p><ul><li>分完区查看一下分区的情况</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.38l1lop40mw0.webp"></p><blockquote><p>发现这里多出一个 sda3 的区</p></blockquote><ul><li>创建物理卷</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pvcreate /dev/sda3</span><br></pre></td></tr></table></figure><blockquote><p>这个地方可能会报错，报 Device not found:/dev/sda3 ,这个时候可以将 liunx 重启一下，一般不会报错。</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.39pwnkdmdbs0.webp"></p><blockquote><p>创建成功了就会如上图显示成功，同时查看了物理卷的信息，出现了新增的 sda3</p></blockquote><ul><li>查看当前物理卷的使用情况</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgdisplay</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.2h594oxdzyq0.webp"></p><ul><li>把创建的这个物理卷加进来</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#加上新加的卷</span><br><span class="line">vgextend /dev/centos/ /dev/sda3</span><br><span class="line"></span><br><span class="line">#展示当前卷的情况</span><br><span class="line">vgdisplay</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.26vmb708mjvo.webp"></p><ul><li>查看一下新加卷</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pvdisplay</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.18r6ky8ggujk.webp"></p><ul><li>给更目录 root 分配空间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lvextent -L+1G /dev/centos/root /dev/sda3</span><br><span class="line"></span><br><span class="line"> resize2fs -p /dev/mapper/centos-root 10G</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.59yfu3e5ei80.webp"></p><blockquote><p>如果报了图片中的错误可以使用下面的命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#查看磁盘情况</span><br><span class="line">df -h</span><br><span class="line"></span><br><span class="line">xfs_growfs /dev/mapper/centos-root</span><br><span class="line"></span><br><span class="line">#再次查看磁盘</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.5zoe8ezoqnk0.webp"></p><blockquote><p>下面磁盘空间变化了，说明扩容好了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot项目改造成dubbo微服务项目</title>
      <link href="/2022/07/22/dubbo/"/>
      <url>/2022/07/22/dubbo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="将一个普通的-springboot-微服务改造成-dubbo-的微服务"><a href="#将一个普通的-springboot-微服务改造成-dubbo-的微服务" class="headerlink" title="将一个普通的 springboot 微服务改造成 dubbo 的微服务"></a><font color=red>将一个普通的 springboot 微服务改造成 dubbo 的微服务</font></h1><h4 id="首先搭建-springboot-的微服务项目，直接上代码"><a href="#首先搭建-springboot-的微服务项目，直接上代码" class="headerlink" title="首先搭建 springboot 的微服务项目，直接上代码"></a>首先搭建 springboot 的微服务项目，直接上代码</h4><blockquote><p>目录结构</p></blockquote><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.1sxuhy6ipfz4.webp"></p><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.7jbn8mp2onc0.webp"></p><ul><li>consumer 服务的 service 层</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class consumerService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    public String getOrder() &#123;</span><br><span class="line">        String result = restTemplate.getForObject(&quot;http://localhost:8082/provider&quot;, String.class);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>consumer 服务的 Controller 层</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class consumerController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private consumerService consumerService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/consumer&quot;)</span><br><span class="line">    public String consumer()&#123;</span><br><span class="line">        return consumerService.getOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>consumer 的 pom</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.codehezi.consumer&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;consumer&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ul><li>provider 应用的 service 层</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class providerService &#123;</span><br><span class="line"></span><br><span class="line">    public String getProvider() &#123;</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>provider 应用的 Controller 层</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class providerController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private providerService providerService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/provider&quot;)</span><br><span class="line">    public String getProvider() &#123;</span><br><span class="line">        return providerService.getProvider();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>provider 的 pom</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.codehezi.provider&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;provider&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="在没使用-dubbo-之前使用-RestTemplate-去调用-provider-的应用"><a href="#在没使用-dubbo-之前使用-RestTemplate-去调用-provider-的应用" class="headerlink" title="在没使用 dubbo 之前使用 RestTemplate 去调用 provider 的应用"></a>在没使用 dubbo 之前使用 RestTemplate 去调用 provider 的应用</h2><ul><li><p>1.添加 dubbo 的核心依赖</p></li><li><p>2.添加要使用的注册中心的依赖</p></li><li><p>3.添加要使用的协议的依赖</p></li><li><p>4.配置 dubbo 的基本信息</p></li><li><p>5.配置注册中心的地址</p></li><li><p>6.配置要使用的协议</p></li></ul><h2 id="改造成-dubbo-的微服务"><a href="#改造成-dubbo-的微服务" class="headerlink" title="改造成 dubbo 的微服务"></a>改造成 dubbo 的微服务</h2><ul><li>pom 文件调整，这里用了 dubbo3.0.7，发现自带的 Zookeper 版本过低，需要引入 Zookeper 的版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- dubbo依赖--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.7&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;dubbo-rpc-dubbo&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.7&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;dubbo-registry-zookeeper&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.7&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;dubbo-dependencies-zookeeper&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">          &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">          &lt;exclusions&gt;</span><br><span class="line">              &lt;exclusion&gt;</span><br><span class="line">                  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">                  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">              &lt;/exclusion&gt;</span><br><span class="line">          &lt;/exclusions&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>consumer 应用的配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line"></span><br><span class="line">#dubbo应用的配置</span><br><span class="line">dubbo:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer-application</span><br><span class="line">  protocol:</span><br><span class="line">    name: dubbo   #dubbo协议的名称</span><br><span class="line">    port: 20880   #dubbo协议的端口</span><br><span class="line"></span><br><span class="line">  registry:</span><br><span class="line">    address: zookeeper://192.168.136.20:2181  #Zookeper注册中心的地址</span><br></pre></td></tr></table></figure><ul><li>providder 应用的配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line">#dubbo应用的配置</span><br><span class="line">dubbo:</span><br><span class="line">  application:</span><br><span class="line">    name: provider-application</span><br><span class="line">  protocol:</span><br><span class="line">    name: dubbo   #dubbo协议的名称</span><br><span class="line">    port: 20880   #dubbo协议的端口</span><br><span class="line"></span><br><span class="line">  registry:</span><br><span class="line">    address: zookeeper://192.168.136.20:2181  #Zookeper注册中心的地址</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里需要启动 Zookeper 的服务端</p></blockquote><h2 id="改造-consumer-应用和-provider-应用"><a href="#改造-consumer-应用和-provider-应用" class="headerlink" title="改造 consumer 应用和 provider 应用"></a>改造 consumer 应用和 provider 应用</h2><ul><li>增加接口 moudle</li></ul><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.xd2w0dgua40.webp"></p><h3 id="consumer-应用调整"><a href="#consumer-应用调整" class="headerlink" title="consumer 应用调整"></a>consumer 应用调整</h3><ul><li>调整 pom，引入 common 模块</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.codehezi.common&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;common&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>调整 consumer 的 service</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class consumerService &#123;</span><br><span class="line"></span><br><span class="line">    @DubboReference //使用dubbo注解</span><br><span class="line">    private com.codehezi.providerService.providerService providerService;</span><br><span class="line"></span><br><span class="line">    public String getOrder() &#123;</span><br><span class="line">        return providerService.getProvider();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>启动类开启 dubbo 功能</p><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.hs4pjoeywa0.webp"></p></li></ul><h3 id="调整-provider-应用"><a href="#调整-provider-应用" class="headerlink" title="调整 provider 应用"></a>调整 provider 应用</h3><ul><li>调整 pom，引入 common 模块</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.codehezi.common&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;common&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>调整 provider 的原来的 service 为实现类</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@DubboService</span><br><span class="line">public class providerServiceImpl implements providerService &#123;</span><br><span class="line">  public String getProvider() &#123;</span><br><span class="line">      return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>启动类开启 dubbo 功能</p><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.3j1yq9x6f3e0.webp"></p></li></ul><blockquote><p>到这里一个 dubbo 的微服务项目改造就完成了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows安装hexo静态博客</title>
      <link href="/2022/07/22/hexo/"/>
      <url>/2022/07/22/hexo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="windows搭建静态博客"><a href="#windows搭建静态博客" class="headerlink" title="windows搭建静态博客"></a>windows搭建静态博客</h3><blockquote><p>安装环境</p><ul><li>(1)安装了node的环境，并且版本在14.0.1或者以上</li><li>(2)安装了Git环境</li><li>(3)搭建hexo静态博客</li><li>(4)注册了GitHub账号，便于后面代码托管</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#安装hexo的命令行</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##检查hexo是否安装完成</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.50g2wdtujgo0.webp"></p><blockquote><p>出现这样的输出说明hexo安装完成了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在任意一磁盘下加一个文件夹，如：blogtest，在此文件夹下初始化</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.7jgrkbc5xcs0.webp"></p><blockquote><p>出现此图说明已经初始化完成</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#下载hexo需要的一些依赖</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.7i5b0lwmsog0.webp"></p><blockquote><p>出现这个文件夹说明依赖已经下载完</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#先清理一下</span><br><span class="line">hexo clean</span><br><span class="line"> </span><br><span class="line">#生成静态文件</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">#启动hexo服务</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">#发布到GitHub</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codehezi/rest@master/images/image.45b9j5qn4n80.webp"></p><blockquote><p>出现这个图说明hexo的静态博客已经搭建成功</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装git</title>
      <link href="/2022/07/20/git/"/>
      <url>/2022/07/20/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="liunx安装git"><a href="#liunx安装git" class="headerlink" title="liunx安装git"></a>liunx安装git</h3><blockquote><p>git管理codeing的版本需要git版本至少是1.8.0以上</p></blockquote><h2 id="安装git的依赖"><a href="#安装git的依赖" class="headerlink" title="安装git的依赖"></a><em>安装git的依赖</em></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure><h2 id="删除已有的git，这个版本默认是1-8-0左右的"><a href="#删除已有的git，这个版本默认是1-8-0左右的" class="headerlink" title="删除已有的git，这个版本默认是1.8.0左右的"></a><em>删除已有的git，这个版本默认是1.8.0左右的</em></h2><blockquote><p>yum remove git</p></blockquote><h1 id="下载git源码"><a href="#下载git源码" class="headerlink" title="下载git源码"></a>下载git源码</h1><h2 id="进入下载的目录在（以-usr-local-git-目录为例）"><a href="#进入下载的目录在（以-usr-local-git-目录为例）" class="headerlink" title="进入下载的目录在（以 /usr/local/git 目录为例）"></a><em>进入下载的目录在（以 /usr/local/git 目录为例）</em></h2><blockquote><p>wget <a href="https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gz">https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gz</a></p></blockquote><h2 id="将下载的压缩包解压"><a href="#将下载的压缩包解压" class="headerlink" title="将下载的压缩包解压"></a><em>将下载的压缩包解压</em></h2><blockquote><p>tar -zxvf git-2.8.3.tar.gz</p></blockquote><h2 id="进到解压后的目录配置Git的安装路径"><a href="#进到解压后的目录配置Git的安装路径" class="headerlink" title="进到解压后的目录配置Git的安装路径"></a><em>进到解压后的目录配置Git的安装路径</em></h2><blockquote><p>./configure prefix=/usr/local/git/</p></blockquote><h2 id="编译并且安装"><a href="#编译并且安装" class="headerlink" title="编译并且安装"></a><em>编译并且安装</em></h2><blockquote><p>make &amp;&amp; make install</p></blockquote><h2 id="然后可以查看下Git的版本"><a href="#然后可以查看下Git的版本" class="headerlink" title="然后可以查看下Git的版本"></a><em>然后可以查看下Git的版本</em></h2><blockquote><p>git –version</p></blockquote><h2 id="将git指令添加到-etc-profile-中"><a href="#将git指令添加到-etc-profile-中" class="headerlink" title="将git指令添加到 /etc/profile 中"></a><em>将git指令添加到 /etc/profile 中</em></h2><p>#在这个文件的后面加上</p><blockquote><p>export PATH=$PATH:/usr/local/git/bin</p></blockquote><h2 id="执行命令是的文件生效"><a href="#执行命令是的文件生效" class="headerlink" title="执行命令是的文件生效"></a><em>执行命令是的文件生效</em></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><blockquote><p>linux的git安装成功</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>liunx安装docker容器</title>
      <link href="/2022/07/19/linux/"/>
      <url>/2022/07/19/linux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="liunx安装docker容器"><a href="#liunx安装docker容器" class="headerlink" title="liunx安装docker容器"></a>liunx安装docker容器</h3><h2 id="（1）先查看一下操作系统的版本"><a href="#（1）先查看一下操作系统的版本" class="headerlink" title="（1）先查看一下操作系统的版本"></a>（1）先查看一下操作系统的版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username -r</span><br></pre></td></tr></table></figure><h2 id="（2）如果版本低于3-10，需要更新版本"><a href="#（2）如果版本低于3-10，需要更新版本" class="headerlink" title="（2）如果版本低于3.10，需要更新版本"></a>（2）如果版本低于3.10，需要更新版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h2 id="（3）下载yum命令需要用到的工具"><a href="#（3）下载yum命令需要用到的工具" class="headerlink" title="（3）下载yum命令需要用到的工具"></a>（3）下载yum命令需要用到的工具</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h2 id="（4）配置docker下载的镜像，不然下载会很慢"><a href="#（4）配置docker下载的镜像，不然下载会很慢" class="headerlink" title="（4）配置docker下载的镜像，不然下载会很慢"></a>（4）配置docker下载的镜像，不然下载会很慢</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//官网地址</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">//阿里云地址</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="（6）查看docker版本列表，选择要下载的版本"><a href="#（6）查看docker版本列表，选择要下载的版本" class="headerlink" title="（6）查看docker版本列表，选择要下载的版本"></a>（6）查看docker版本列表，选择要下载的版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><h2 id="（7）安装docker"><a href="#（7）安装docker" class="headerlink" title="（7）安装docker"></a>（7）安装docker</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce-17.12.0.ce </span><br></pre></td></tr></table></figure><h2 id="（8）查看docker版本，看是否安装成功"><a href="#（8）查看docker版本，看是否安装成功" class="headerlink" title="（8）查看docker版本，看是否安装成功"></a>（8）查看docker版本，看是否安装成功</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//查看版本</span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line">//验证是否安装成功</span><br><span class="line">1.systemctl start dokcer  //启动docker容器</span><br><span class="line"></span><br><span class="line">2.systemctl enable docker //设置docker容器开机自启动</span><br><span class="line"></span><br><span class="line">3.docker version(如果出现客户端和服务端说明安装docker成功了)</span><br><span class="line"></span><br><span class="line">//查看docker的启动状态</span><br><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h2 id="（9）卸载docker"><a href="#（9）卸载docker" class="headerlink" title="（9）卸载docker"></a>（9）卸载docker</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//查询docker安装过的包</span><br><span class="line">yum list installed | grep docker</span><br><span class="line"></span><br><span class="line">//删除安装包</span><br><span class="line">yum remove docker-ce.x86_64 ddocker-ce-cli.x86_64 -y</span><br><span class="line"></span><br><span class="line">//删除镜像/容器等</span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="（10）查看docker里面镜像的运行情况"><a href="#（10）查看docker里面镜像的运行情况" class="headerlink" title="（10）查看docker里面镜像的运行情况"></a>（10）查看docker里面镜像的运行情况</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps //查看正在运行的镜像</span><br><span class="line"></span><br><span class="line">docker ps -a //查看所有的镜像</span><br></pre></td></tr></table></figure><h2 id="（11）关闭运行的镜像和docker容器"><a href="#（11）关闭运行的镜像和docker容器" class="headerlink" title="（11）关闭运行的镜像和docker容器"></a>（11）关闭运行的镜像和docker容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop 镜像的id或者镜像名称 //关闭运行的镜像</span><br><span class="line"></span><br><span class="line">systemctl stop docker //停止正在运行的容器</span><br></pre></td></tr></table></figure><h2 id="一些docker查看的参数"><a href="#一些docker查看的参数" class="headerlink" title="一些docker查看的参数"></a>一些docker查看的参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br><span class="line"></span><br><span class="line">OPTIONS说明：</span><br><span class="line">-a :显示所有的容器，包括未运行的。</span><br><span class="line">-f :根据条件过滤显示的内容。</span><br><span class="line">--format :指定返回值的模板文件。</span><br><span class="line">-l :显示最近创建的容器。</span><br><span class="line">-n :列出最近创建的n个容器。</span><br><span class="line">--no-trunc :不截断输出。</span><br><span class="line">-q :静默模式，只显示容器编号。</span><br><span class="line">-s :显示总的文件大小。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node的版本管理工具</title>
      <link href="/2022/07/19/node/"/>
      <url>/2022/07/19/node/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="node的版本管理工具"><a href="#node的版本管理工具" class="headerlink" title="node的版本管理工具"></a>node的版本管理工具</h3><h1 id="（1）如果已经安装了node，可以通过npm命令直接安装"><a href="#（1）如果已经安装了node，可以通过npm命令直接安装" class="headerlink" title="（1）如果已经安装了node，可以通过npm命令直接安装"></a>（1）如果已经安装了node，可以通过npm命令直接安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#这个安装的是windows版本</span><br><span class="line">npm install -g nvmw </span><br><span class="line">#查看nvmw的版本，看是否安装成功</span><br><span class="line">nvmw -V ##注意：这个V是大写</span><br><span class="line">#然后可以通过nvmw命令安装node的版本（版本需要是5.0.0以上的）</span><br><span class="line">列如：nvmw install v14.0.1</span><br><span class="line">#可以在当前窗口切换node的版本</span><br><span class="line">nvmw use v14.0.1 || nvmw switch v14.0.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
